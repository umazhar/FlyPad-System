
library ieee;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;

entity I2C_USB_BRIDGE is

port
	(
		-- Input ports
		B_CLK			: IN  	STD_LOGIC;								-- Master Clk
		B_START_EXP	: IN  	STD_LOGIC;								-- Acquisition start request
		B_BUSY     	: IN    	STD_LOGIC;                    	-- I2C indicates transaction in progress
		B_DATA_RD  	: IN    	STD_LOGIC_VECTOR(7 DOWNTO 0); 	-- I2C data read from slave
		
		-- out ports		
		B_RESET_N  	: OUT    STD_LOGIC;                  	  	-- I2C active low reset
		B_ENA   	  	: OUT    STD_LOGIC;                    	-- I2C latch in command
		B_ADDR     	: OUT    STD_LOGIC_VECTOR(6 DOWNTO 0); 	-- I2C address of target slave
		B_RW       	: OUT    STD_LOGIC;                    	-- I2C '0' is write, '1' is read
		B_DATA_WR  	: OUT    STD_LOGIC_VECTOR(7 DOWNTO 0); 	-- I2C data to write to slave
		B_DATA     	: OUT		STD_LOGIC_VECTOR(31 DOWNTO 0);	-- Data to write on USB
		B_SEND     	: OUT		STD_LOGIC;								-- Request USB Data send
		B_SW_SELECT	: OUT		STD_LOGIC_VECTOR (7 DOWNTO 0);	-- I2C line switch selection

		B_ACK_ERR 	: BUFFER STD_LOGIC                    		-- I2C flag if improper acknowledge from slave

		);
end entity I2C_USB_BRIDGE;	
	
architecture archi of I2C_USB_BRIDGE is

SIGNAL slave_addr   :  STD_LOGIC_VECTOR(6 DOWNTO 0)	:= "1001000";
SIGNAL busy_prev    :  STD_LOGIC								:= '0';

BEGIN

PROCESS(B_CLK)				 

VARIABLE busy_cnt   :  INTEGER RANGE 0 to 31				:= 0;	-- 32 I2C operations

BEGIN

-- Configure I2C sensor

-- Loop read capacitance values

-- Write capacitance values on USB 

  busy_prev <= B_BUSY;                       --capture the value of the previous i2c busy signal
  IF(busy_prev = '0' AND B_BUSY = '1') THEN  --i2c busy just went high
    busy_cnt := busy_cnt + 1;                  --counts the times busy has gone from low to high during transaction
  END IF;
  CASE busy_cnt IS                             --busy_cnt keeps track of which command we are on
    WHEN 0 =>                                  --no command latched in yet
      B_ENA <= '1';                            --initiate the transaction
      B_ADDR <= slave_addr;                    --set the address of the slave
      B_RW <= '0';                             --command 1 is a write
      B_DATA_WR <= "00000000";              --data to be written (register address)
    WHEN 1 =>                                  --1st busy high: command 1 latched, okay to issue command 2
      B_RW <= '1';                             --command 2 is a read
    WHEN 2 =>                                  --2nd busy high: command 2 latched, okay to issue command 3
      B_RW <= '1';                             --command 3 is a read
      IF(B_BUSY = '0') THEN                    --indicates data read in command 2 is ready
        B_DATA(15 DOWNTO 8) <= B_DATA_RD;       --retrieve data from command 2
      END IF;		  
    WHEN 3 =>                                  --3rd busy high: command 3 latched, okay to issue command 4
      B_RW <= '1';
      IF(B_BUSY = '0') THEN
        B_DATA(15 DOWNTO 8) <= B_DATA_RD;
      END IF;		  
    WHEN 4 =>                                  --4th busy high: command 4 latched, ready to stop
      B_RW <= '1';
		IF(B_BUSY = '0') THEN
        B_DATA(7 DOWNTO 0) <= B_DATA_RD;
      END IF;		  
    WHEN 5 =>                                  --4th busy high: command 4 latched, ready to stop
      B_RW <= '1';
		IF(B_BUSY = '0') THEN
        B_DATA(7 DOWNTO 0) <= B_DATA_RD;		  
      END IF;		  
    WHEN 6 =>                                  --4th busy high: command 4 latched, ready to stop
      B_ENA <= '0';
      IF(B_BUSY = '0') THEN
        B_DATA(7 DOWNTO 0) <= B_DATA_RD;
        busy_cnt := 0;                           --reset busy_cnt for next transaction
 --       state <= home;                           --transaction complete, go to next state in design		  
      END IF;
    WHEN OTHERS => NULL;
  END CASE;
  
end PROCESS;

--blabla
  
end archi;
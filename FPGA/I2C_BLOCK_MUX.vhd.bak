
LIBRARY ieee;
USE IEEE.STD_LOGIC_1164.ALL;
USE IEEE.STD_LOGIC_ARITH.ALL;
USE IEEE.STD_LOGIC_UNSIGNED.ALL;

ENTITY I2C_BLOCK_MUX IS

PORT
	(
		-- Input ports
		M_CLK			: IN  	STD_LOGIC;								-- Master Clk
		M_SEL_EXP		: IN  	STD_LOGIC_VECTOR(7 DOWNTO 0);								-- Acquisition start request
		M_DATA_I2C_1	: IN    	STD_LOGIC_VECTOR(7 DOWNTO 0);                    	-- I2C indicates transaction in progress
		B_DATA_RD  	: IN    	STD_LOGIC_VECTOR(7 DOWNTO 0); 	-- I2C data read from slave
		
		-- out ports		
		B_RESET_N  	: OUT    STD_LOGIC;                  	  	-- I2C active low reset
		B_ENA   	  	: OUT    STD_LOGIC;                    	-- I2C latch in command
		B_ADDR     	: OUT    STD_LOGIC_VECTOR(6 DOWNTO 0); 	-- I2C address of target slave
		B_RW       	: OUT    STD_LOGIC;                    	-- I2C '0' is write, '1' is read
		B_DATA_WR  	: OUT    STD_LOGIC_VECTOR(7 DOWNTO 0); 	-- I2C data to write to slave
		B_DATA     	: OUT		STD_LOGIC_VECTOR(159 DOWNTO 0);	-- Data to write on USB
		B_SEND     	: OUT		STD_LOGIC;								-- Request USB Data send
		B_I2C_SWITCH: OUT		STD_LOGIC_VECTOR (7 DOWNTO 0);	-- I2C line switch selection

		B_ACK_ERR 	: BUFFER STD_LOGIC;                   		-- I2C flag if improper acknowledge from slave

		B_DUMMY     : OUT		STD_LOGIC_VECTOR (7 DOWNTO 0)
		
		);
end entity I2C_USB_BRIDGE;	
	
architecture archi of I2C_USB_BRIDGE is

SIGNAL slave_addr		:	STD_LOGIC_VECTOR(6 DOWNTO 0)	:= "1001000";
SIGNAL busy_prev		:	STD_LOGIC;
SIGNAL channel_Id		:	STD_LOGIC_VECTOR(7 DOWNTO 0)	:= "00000001";

TYPE machine IS(ready, i2c);							--state machine datatype
SIGNAL state	: machine;								--current state

BEGIN

-- PROCESS(B_CLK, B_BUSY)				 
PROCESS(B_CLK, B_START_EXP)				 

VARIABLE busy_cnt   :  INTEGER := 0;

BEGIN

B_RESET_N <= B_START_EXP;

IF(B_CLK'EVENT AND B_CLK = '1') THEN

-- Configure I2C sensor

-- Loop read capacitance values

-- Write capacitance values on USB 

B_DUMMY <= "00000000";

--B_RESET_N <= B_START_EXP;
--B_RESET_N <= '0';

--I²C Busy counter management
  busy_prev <= B_BUSY;									--capture the value of the previous i2c busy signal
  IF(busy_prev = '0' AND B_BUSY = '1') THEN		--i2c busy just went high
    busy_cnt := busy_cnt + 1;							--counts the times busy has gone from low to high during transaction
  END IF;

--		  B_DUMMY(7) <= B_BUSY; --red probe
--		  B_DUMMY(6) <= busy_prev; --green probe
 
--I²C Communications State Machine 
CASE busy_cnt IS											--busy_cnt keeps track of which command we are on
	WHEN 0 =>												--no command latched in yet
--		B_RESET_N <= '1';
		B_ENA <= '1';										--initiate the transaction
      B_ADDR <= slave_addr;							--set the address of the slave
      B_RW <= '0';										--command 1 is a write
      B_DATA_WR <= "00000000";						--data to be written (register address)

		  B_DUMMY <= "10000000";
		
	WHEN 1 =>												--1st busy high: command 1 latched, okay to issue command 2
      B_RW <= '1';										--command 2 is a read
	WHEN 2 =>												--2nd busy high: command 2 latched, okay to issue command 3
      B_RW <= '1';										--command 3 is a read
      IF(B_BUSY = '0') THEN							--indicates data read in command 2 is ready
        B_DATA(7 DOWNTO 0) <= B_DATA_RD;			--retrieve data from command 2
      END IF;		  
   WHEN 3 =>												--3rd busy high: command 3 latched, okay to issue command 4
      B_RW <= '1';
      IF(B_BUSY = '0') THEN
        B_DATA(15 DOWNTO 8) <= B_DATA_RD;
      END IF;		  
   WHEN 4 =>                               	   --4th busy high: command 4 latched, ready to stop
      B_RW <= '1';
		IF(B_BUSY = '0') THEN
        B_DATA(23 DOWNTO 16) <= B_DATA_RD;
      END IF;		  
   WHEN 5 =>                                	 	--4th busy high: command 4 latched, ready to stop
      B_RW <= '1';
		IF(B_BUSY = '0') THEN
        B_DATA(31 DOWNTO 24) <= B_DATA_RD;		  
      END IF;		  
	WHEN 6 =>												--2nd busy high: command 2 latched, okay to issue command 3
      B_RW <= '1';										--command 3 is a read
      IF(B_BUSY = '0') THEN							--indicates data read in command 2 is ready
        B_DATA(39 DOWNTO 32) <= B_DATA_RD;			--retrieve data from command 2
      END IF;		  
   WHEN 7 =>												--3rd busy high: command 3 latched, okay to issue command 4
      B_RW <= '1';
      IF(B_BUSY = '0') THEN
        B_DATA(47 DOWNTO 40) <= B_DATA_RD;
      END IF;		  
   WHEN 8 =>                               	   --4th busy high: command 4 latched, ready to stop
      B_RW <= '1';
		IF(B_BUSY = '0') THEN
        B_DATA(55 DOWNTO 48) <= B_DATA_RD;
      END IF;		  
   WHEN 9 =>                                	 	--4th busy high: command 4 latched, ready to stop
      B_RW <= '1';
		IF(B_BUSY = '0') THEN
        B_DATA(63 DOWNTO 56) <= B_DATA_RD;		  
      END IF;
	WHEN 10 =>												--2nd busy high: command 2 latched, okay to issue command 3
      B_RW <= '1';										--command 3 is a read
      IF(B_BUSY = '0') THEN							--indicates data read in command 2 is ready
        B_DATA(71 DOWNTO 64) <= B_DATA_RD;			--retrieve data from command 2
      END IF;		  
   WHEN 11 =>												--3rd busy high: command 3 latched, okay to issue command 4
      B_RW <= '1';
      IF(B_BUSY = '0') THEN
        B_DATA(79 DOWNTO 72) <= B_DATA_RD;
      END IF;		  
   WHEN 12 =>                               	   --4th busy high: command 4 latched, ready to stop
      B_RW <= '1';
		IF(B_BUSY = '0') THEN
        B_DATA(87 DOWNTO 80) <= B_DATA_RD;
      END IF;		  
   WHEN 13 =>                                	 	--4th busy high: command 4 latched, ready to stop
      B_RW <= '1';
		IF(B_BUSY = '0') THEN
        B_DATA(95 DOWNTO 88) <= B_DATA_RD;		  
      END IF;		
	WHEN 14 =>												--2nd busy high: command 2 latched, okay to issue command 3
      B_RW <= '1';										--command 3 is a read
      IF(B_BUSY = '0') THEN							--indicates data read in command 2 is ready
        B_DATA(103 DOWNTO 96) <= B_DATA_RD;			--retrieve data from command 2
      END IF;		  
   WHEN 15 =>												--3rd busy high: command 3 latched, okay to issue command 4
      B_RW <= '1';
      IF(B_BUSY = '0') THEN
        B_DATA(111 DOWNTO 104) <= B_DATA_RD;
      END IF;		  
   WHEN 16 =>                               	   --4th busy high: command 4 latched, ready to stop
      B_RW <= '1';
		IF(B_BUSY = '0') THEN
        B_DATA(119 DOWNTO 112) <= B_DATA_RD;
      END IF;		  
   WHEN 17 =>                                	 	--4th busy high: command 4 latched, ready to stop
      B_RW <= '1';
		IF(B_BUSY = '0') THEN
        B_DATA(127 DOWNTO 120) <= B_DATA_RD;		  
      END IF;
   WHEN 18 =>                                	 	--4th busy high: command 4 latched, ready to stop
      B_RW <= '1';
		IF(B_BUSY = '0') THEN
        B_DATA(135 DOWNTO 128) <= B_DATA_RD;		  
      END IF;
   WHEN 19 =>                                	 	--4th busy high: command 4 latched, ready to stop
      B_RW <= '1';
		IF(B_BUSY = '0') THEN
        B_DATA(143 DOWNTO 136) <= B_DATA_RD;		  
      END IF;
   WHEN 20 =>                                	 	--4th busy high: command 4 latched, ready to stop
      B_RW <= '1';
		IF(B_BUSY = '0') THEN
        B_DATA(151 DOWNTO 144) <= B_DATA_RD;		  
      END IF;
   WHEN 21 =>                                  	--4th busy high: command 4 latched, ready to stop
      B_ENA <= '0';
      IF(B_BUSY = '0') THEN
        B_DATA(159 DOWNTO 152) <= B_DATA_RD;
		  B_DATA(151 DOWNTO 144) <= channel_Id;
        busy_cnt := 0;                          --reset busy_cnt for next transaction
 --       state <= home;                        --transaction complete, go to next state in design		  
      END IF;

		  B_DUMMY <= "10000000";
		
   WHEN OTHERS => NULL;
  END CASE;

END IF;														-- End if clk event etc
end PROCESS;

--blabla
  
end archi;
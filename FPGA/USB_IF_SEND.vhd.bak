
library ieee;
use ieee.std_logic_1164.all;

entity USB_IF_SEND is

port
	(
		-- Input ports
		USB_CLK			: in  STD_LOGIC;
		USB_RXF			: in  STD_LOGIC;								-- USB send FIFO Full
		USB_DATA	     	: in	STD_LOGIC_VECTOR (31 downto 0);	-- Data from bridge to write on USB
		USB_SEND     	: in	STD_LOGIC;								-- Request USB Data send
		-- out ports
		USB_FTDI_DATA	: out STD_LOGIC_VECTOR (7 downto 0);	-- Data to pass to FTDI
		USB_WR			: out STD_LOGIC;								-- FTDI Write request
		USB_ALARM		: out STD_LOGIC								-- Buffer Full, data continuity not ensured
		);
end entity USB_IF_SEND;	
	
architecture archi of USB_IF_SEND is

begin

PROCESS(USB_CLK)				 

BEGIN

-- On a send short square pulse

-- Copy DATA to internal register



-- Present Byte0 on FTDI_DATA port

-- Test RXF

-- If RXF not full, activate WR line 50ns min to write the data byte in the USB FIFO

-- If RXF full, activate ALARM line and write "FULL" int the USB FIFO

-- Tempo 50ns min 



-- Present Byte1 on FTDI_DATA port

-- Test RXF

-- If RXF not full, activate WR line 50ns min to write the data byte in the USB FIFO

-- If RXF full, activate ALARM line and write "FULL" int the USB FIFO

-- Tempo 50ns min 



-- Present Byte2 on FTDI_DATA port

-- Test RXF

-- If RXF not full, activate WR line 50ns min to write the data byte in the USB FIFO

-- If RXF full, activate ALARM line and write "FULL" int the USB FIFO

-- Tempo 50ns min 



-- Present Byte3 on FTDI_DATA port

-- Test RXF

-- If RXF not full, activate WR 50ns min line to write the data byte in the USB FIFO

-- If RXF full, activate ALARM line and write "FULL" int the USB FIFO

-- Tempo 50ns min 

end PROCESS;
  
end archi;
-- Top Level Component

library ieee;
use ieee.std_logic_1164.all;

entity FPGA_I2C_CAP_v1 is

GENERIC(
  sys_clk_frq : INTEGER   := 50_000_000; --system clock speed in Hz
  i2c_scl_frq : INTEGER   := 400_000);    --speed the i2c bus (scl) will run at in Hz

port
	(
		-- Input ports
		CLK			: IN  	STD_LOGIC;								-- Master Clk
		START_EXP	: IN  	STD_LOGIC;								-- Acquisition start request		
		FTDI_RXF		: IN  	STD_LOGIC;
		
		-- Inout ports
		SDA_1		: inout STD_LOGIC;
		SCL_1		: inout STD_LOGIC;	
		SDA_2		: inout STD_LOGIC;
		SCL_2		: inout STD_LOGIC;	
		SDA_3		: inout STD_LOGIC;
		SCL_3		: inout STD_LOGIC;	
		SDA_4		: inout STD_LOGIC;
		SCL_4		: inout STD_LOGIC;
		SDA_5		: inout STD_LOGIC;
		SCL_5		: inout STD_LOGIC;	
		SDA_6		: inout STD_LOGIC;
		SCL_6		: inout STD_LOGIC;	
		SDA_7		: inout STD_LOGIC;
		SCL_7		: inout STD_LOGIC;	
		SDA_8		: inout STD_LOGIC;
		SCL_8		: inout STD_LOGIC;	
		SDA_9		: inout STD_LOGIC;
		SCL_9		: inout STD_LOGIC;	
		SDA_10	: inout STD_LOGIC;
		SCL_10	: inout STD_LOGIC;		
				
		-- Output ports
		FTDI_WR		: out STD_LOGIC;
		ALARM			: out STD_LOGIC;		
		FTDI_DATA	: out STD_LOGIC_VECTOR (7 downto 0)
	);
end entity FPGA_I2C_CAP_v1;	
	
architecture behav_v1 of FPGA_I2C_CAP_v1 is

SIGNAL	S_RESET_N		: STD_LOGIC:='0';
SIGNAL	S_ENA    	 	: STD_LOGIC:='0';
SIGNAL	S_ADDR   	 	: STD_LOGIC_VECTOR(6 DOWNTO 0):=(others=>'0');
SIGNAL	S_RW     	 	: STD_LOGIC:='0';
SIGNAL	S_DATA_WR	 	: STD_LOGIC_VECTOR(7 DOWNTO 0):=(others=>'0');
SIGNAL	S_BUSY    		: STD_LOGIC:='0';
SIGNAL	S_DATA_RD 		: STD_LOGIC_VECTOR(7 DOWNTO 0):=(others=>'0');
SIGNAL	S_ACK_ERROR 	: STD_LOGIC:='0';
SIGNAL	S_SDA       	: STD_LOGIC:='0';
SIGNAL	S_SCL       	: STD_LOGIC:='0';
SIGNAL	S_USB_DATA	   : STD_LOGIC_VECTOR (31 downto 0):=(others=>'0');
SIGNAL	S_USB_SEND     : STD_LOGIC:='0';
SIGNAL	S_SW_SELECT		: STD_LOGIC_VECTOR (7 DOWNTO 0):=(others=>'0');

--declare i2c master component
COMPONENT i2c_master
   GENERIC(
      input_clk : INTEGER;  --input clock speed from user logic in Hz
      bus_clk   : INTEGER); --speed the i2c bus (scl) will run at in Hz
	PORT(
      clk       : IN     STD_LOGIC;                    --system clock
      reset_n   : IN     STD_LOGIC;                    --active low reset
      ena       : IN     STD_LOGIC;                    --latch in command
      addr      : IN     STD_LOGIC_VECTOR(6 DOWNTO 0); --address of target slave
      rw        : IN     STD_LOGIC;                    --'0' is write, '1' is read
      data_wr   : IN     STD_LOGIC_VECTOR(7 DOWNTO 0); --data to write to slave
      busy      : OUT    STD_LOGIC;                    --indicates transaction in progress
      data_rd   : OUT    STD_LOGIC_VECTOR(7 DOWNTO 0); --data read from slave
      ack_error : BUFFER STD_LOGIC;                    --flag if improper acknowledge from slave
      sda       : INOUT  STD_LOGIC;                    --serial data output of i2c bus
      scl       : INOUT  STD_LOGIC);                   --serial clock output of i2c bus
END COMPONENT i2c_master;

--declare USB IF send component
COMPONENT USB_IF_SEND
PORT
	(
		-- Input ports
		USB_CLK			: in  STD_LOGIC;
		USB_RXF			: in  STD_LOGIC;								-- USB send FIFO Full
		USB_DATA	     	: in	STD_LOGIC_VECTOR (31 downto 0);	-- Data from bridge to write on USB
		USB_SEND     	: in	STD_LOGIC;								-- Request USB Data send
		-- out ports
		USB_FTDI_DATA	: out STD_LOGIC_VECTOR (7 downto 0);	-- Data to pass to FTDI
		USB_WR			: out STD_LOGIC;								-- FTDI Write request
		USB_ALARM		: out STD_LOGIC								-- Buffer Full, data continuity not ensured
		);
END COMPONENT USB_IF_SEND;	

--declare I2C_SWITCH component
COMPONENT I2C_SWITCH
PORT
	(
		-- Input ports
		SW_CLK			: IN  STD_LOGIC;		
		SW_SW_SELECT	: IN		STD_LOGIC_VECTOR (7 DOWNTO 0);	-- I2C line switch selection
		-- Inout ports
		SW_SDA		: inout std_logic;      							-- I2C lines from internal component
		SW_SCL		: inout std_logic;      							-- I2C lines from internal component
		SW_SDA_1		: inout std_logic;      							-- I2C lines to external world
		SW_SCL_1		: inout std_logic;	
		SW_SDA_2		: inout std_logic;
		SW_SCL_2		: inout std_logic;	
		SW_SDA_3		: inout std_logic;
		SW_SCL_3		: inout std_logic;	
		SW_SDA_4		: inout std_logic;
		SW_SCL_4		: inout std_logic;
		SW_SDA_5		: inout std_logic;
		SW_SCL_5		: inout std_logic;	
		SW_SDA_6		: inout std_logic;
		SW_SCL_6		: inout std_logic;	
		SW_SDA_7		: inout std_logic;
		SW_SCL_7		: inout std_logic;	
		SW_SDA_8		: inout std_logic;
		SW_SCL_8		: inout std_logic;	
		SW_SDA_9		: inout std_logic;
		SW_SCL_9		: inout std_logic;	
		SW_SDA_10	: inout std_logic;
		SW_SCL_10	: inout std_logic		
		);
END COMPONENT I2C_SWITCH;

--declare USB I2C bridge component
COMPONENT I2C_USB_BRIDGE
PORT
	(
		-- Input ports
		B_CLK			: IN  	STD_LOGIC;								-- Master Clk
		B_START_EXP	: IN  	STD_LOGIC;								-- Acquisition start request
		B_BUSY     	: IN    	STD_LOGIC;                    	-- I2C indicates transaction in progress
		B_DATA_RD  	: IN    	STD_LOGIC_VECTOR(7 DOWNTO 0); 	-- I2C data read from slave
		
		-- out ports		
		B_RESET_N  	: OUT    STD_LOGIC;                  	  	-- I2C active low reset
		B_ENA   	  	: OUT    STD_LOGIC;                    	-- I2C latch in command
		B_ADDR     	: OUT    STD_LOGIC_VECTOR(6 DOWNTO 0); 	-- I2C address of target slave
		B_RW       	: OUT    STD_LOGIC;                    	-- I2C '0' is write, '1' is read
		B_DATA_WR  	: OUT    STD_LOGIC_VECTOR(7 DOWNTO 0); 	-- I2C data to write to slave
		B_DATA     	: OUT		STD_LOGIC_VECTOR (31 downto 0);	-- Data to write on USB
		B_SEND     	: OUT		STD_LOGIC;								-- Request USB Data send
		B_SW_SELECT	: OUT		STD_LOGIC_VECTOR (7 DOWNTO 0);	-- I2C line switch selection		

		B_ACK_ERR 	: BUFFER STD_LOGIC                    		-- I2C flag if improper acknowledge from slave

		);
END COMPONENT I2C_USB_BRIDGE;	  
  
--signal s1,c1,c2 : std_logic:='0'; 
  
BEGIN

 --instantiate i2c_master
  i2c_master_0:  i2c_master
    GENERIC MAP(	input_clk 	=> sys_clk_frq,
						bus_clk 		=> i2c_scl_frq)
						
    PORT MAP(		clk 			=> CLK,
						reset_n		=> S_RESET_N,
						ena 			=> S_ENA,
						addr 			=> S_ADDR,
						rw 			=> S_RW,
						data_wr 		=> S_DATA_WR,
						busy 			=> S_BUSY,
						data_rd 		=> S_DATA_RD,
						ack_error 	=> S_ACK_ERROR,
						sda 			=> S_SDA,
						scl 			=> S_SCL);  

  --instantiate USB_IF_SEND
  USB_IF_SEND_0:  USB_IF_SEND
    PORT MAP(		USB_CLK 		=> CLK,
						USB_RXF 		=> FTDI_RXF,
						USB_DATA 	=> S_USB_DATA,
						USB_SEND 	=> S_USB_SEND,
						USB_FTDI_DATA 	=> FTDI_DATA,
						USB_WR 		=> FTDI_WR,
						USB_ALARM 	=> ALARM); 
  
  --instantiate I2C_USB_BRIDGE
  I2C_USB_BRIDGE_0:  I2C_USB_BRIDGE
    PORT MAP(		B_CLK 		=> CLK,
						B_START_EXP	=> START_EXP,
						B_BUSY 		=> S_BUSY,
						B_DATA_RD 	=> S_DATA_RD,
						B_RESET_N 	=> S_RESET_N,
						B_ENA 		=> S_ENA,
						B_ADDR 		=> S_ADDR,
						B_RW 			=> S_RW,
						B_DATA_WR 	=> S_DATA_WR,
						B_DATA 		=> S_USB_DATA,
						B_SEND 		=> S_USB_SEND,
						B_SW_SELECT => S_SW_SELECT);
  
  --instantiate I2C_SWITCH
  I2C_SWITCH_0:  I2C_SWITCH
	 PORT MAP(		SW_CLK 			=> CLK,
						SW_SW_SELECT 	=> S_SW_SELECT,
						SW_SDA 			=> S_SDA,
						SW_SCL 			=> S_SCL,
						SW_SDA_1 		=> SDA_1,
						SW_SCL_1 		=> SCL_1,
						SW_SDA_2 		=> SDA_2,
						SW_SCL_2 		=> SCL_2,
						SW_SDA_3 		=> SDA_3,
						SW_SCL_3 		=> SCL_3,
						SW_SDA_4 		=> SDA_4,
						SW_SCL_4 		=> SCL_4,
						SW_SDA_5 		=> SDA_5,
						SW_SCL_5 		=> SCL_5,
						SW_SDA_6 		=> SDA_6,
						SW_SCL_6 		=> SCL_6,
						SW_SDA_7 		=> SDA_7,
						SW_SCL_7 		=> SCL_7,
						SW_SDA_8 		=> SDA_8,
						SW_SCL_8 		=> SCL_8,
						SW_SDA_9 		=> SDA_9,
						SW_SCL_9 		=> SCL_9,
						SW_SDA_10 		=> SDA_10,
						SW_SCL_10 		=> SCL_10);  
   
end behav_v1;